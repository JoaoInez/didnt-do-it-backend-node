type User {
  id: ID!
  username: String!
  email: String!
}

type Todo {
  id: ID!
  task: String!
  completed: Boolean!
}

type Message {
  message: String!
}

enum SignUpErrors {
  USERNAME_IN_USE
  EMAIL_IN_USE
  DB_ERROR
}

enum CreateTodoErrors {
  DB_ERROR
}

type SignUpMessage {
  message: SignUpErrors!
}

type CreateTodoMessage {
  message: CreateTodoErrors!
}

"Returns either an user or an error message"
union SignUpResult = User | SignUpMessage

"Returns either a todo or an error message"
union CreateTodoResult = Todo | CreateTodoMessage

input UsersInput {
  username: String
  email: String
}

input SignUpInput {
  username: String!
  email: String!
  password: String!
}

input CreateTodoInput {
  task: String!
}

type Query {
  "Finds all users"
  users(where: UsersInput): [User]!
  "Finds all todos"
  todos: [Todo]!
}

type Mutation {
  "Creates a new user"
  signUp(data: SignUpInput): SignUpResult!
  "Creates a new todo"
  createTodo(data: CreateTodoInput): CreateTodoResult!
}
